// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())

  @@map("order_items")
}

model Order {
  id          String    @id @default(uuid())
  orderType   String
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  supplierId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  customerId  String?
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orderItems  OrderItem[]
  invoices    Invoice[]

  @@map("orders")
}

model Supplier {
  id        String   @id @default(uuid())
  name      String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]

  @@map("suppliers")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Role {
  id        String   @id @default(uuid())
  roleName  String
  permission String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]

  @@map("roles")
}

model Invoice {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  invoiceNumber Int
  amount       Float
  issuedAt     DateTime
  paymentStatus Boolean
  createdAt    DateTime @default(now())

  @@map("invoices")
}

model Product {
  id             String   @id @default(uuid())
  name           String
  category       Category @relation(fields: [categoryId], references: [id])
  categoryId     String
  price          Float
  quantityInStock Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orderItems     OrderItem[]

  @@map("products")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]

  @@map("category")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]

  @@map("customers")
}
